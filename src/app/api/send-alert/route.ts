import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import fs from 'fs';
import path from 'path';

const EMAIL_CONFIG = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
};

const DISTRIBUTION_LIST = process.env.EMAIL_DISTRIBUTION_LIST?.split(',') || [];
const DOCUMENT_PATH = process.env.DOCUMENT_PATH || '/home/david/failsafe/emergency-document.txt';

export async function POST(request: Request) {
  try {
    const { reason } = await request.json();
    
    if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
      console.error('Email configuration missing');
      return NextResponse.json({ error: 'Email not configured' }, { status: 500 });
    }

    if (DISTRIBUTION_LIST.length === 0) {
      console.error('No email distribution list configured');
      return NextResponse.json({ error: 'No distribution list' }, { status: 500 });
    }

    let documentContent = '';
    if (fs.existsSync(DOCUMENT_PATH)) {
      documentContent = fs.readFileSync(DOCUMENT_PATH, 'utf8');
    } else {
      documentContent = 'Emergency document not found at specified path.';
    }

    const transporter = nodemailer.createTransport(EMAIL_CONFIG);

    const subject = reason === 'deadline' 
      ? 'URGENT: Failsafe Deadline Missed' 
      : 'URGENT: Failsafe Security Breach - Incorrect Password';

    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h1 style="color: #dc2626; text-align: center;">ðŸš¨ EMERGENCY ALERT ðŸš¨</h1>
        <div style="background-color: #fef2f2; border: 2px solid #dc2626; border-radius: 8px; padding: 20px; margin: 20px 0;">
          <h2 style="color: #dc2626; margin-top: 0;">Failsafe System Triggered</h2>
          <p><strong>Reason:</strong> ${reason === 'deadline' ? 'Check-in deadline missed' : 'Incorrect password entered'}</p>
          <p><strong>Time:</strong> ${new Date().toISOString()}</p>
          <p><strong>Status:</strong> This is an automated emergency alert from the failsafe system.</p>
        </div>
        <div style="background-color: #f9fafb; border: 1px solid #d1d5db; border-radius: 8px; padding: 20px; margin: 20px 0;">
          <h3 style="margin-top: 0;">Emergency Document:</h3>
          <pre style="white-space: pre-wrap; font-family: monospace; background-color: white; padding: 15px; border-radius: 4px; border: 1px solid #e5e7eb;">${documentContent}</pre>
        </div>
        <p style="text-align: center; color: #6b7280; font-size: 14px;">
          This message was automatically generated by the Failsafe System
        </p>
      </div>
    `;

    const textBody = `
EMERGENCY ALERT - FAILSAFE SYSTEM TRIGGERED

Reason: ${reason === 'deadline' ? 'Check-in deadline missed' : 'Incorrect password entered'}
Time: ${new Date().toISOString()}
Status: This is an automated emergency alert from the failsafe system.

Emergency Document:
${documentContent}

---
This message was automatically generated by the Failsafe System
    `;

    for (const email of DISTRIBUTION_LIST) {
      await transporter.sendMail({
        from: process.env.SMTP_USER,
        to: email.trim(),
        subject,
        text: textBody,
        html: htmlBody,
      });
    }

    console.log(`Emergency alert sent to ${DISTRIBUTION_LIST.length} recipients`);
    return NextResponse.json({ success: true, message: 'Alert sent successfully' });

  } catch (error) {
    console.error('Failed to send emergency alert:', error);
    return NextResponse.json({ error: 'Failed to send alert' }, { status: 500 });
  }
}